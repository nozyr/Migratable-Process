Overall Description:

There are two important classes implemented in this project: ProcessManager and SlaveNode.

ProcessManager: ProcessManager represents the sever which responsible for task launching, managing and migrating. When
a launch command from a user is received, ProcessManager will instantiate the task designated by user from its name(in this project we
implemented two classes implementing MigratableProcess, which are ReverseWordList and FactorialProcess) and then assign
the task to a SlaveNode to have the task running on SlaveNode. During the time the task is being executed, the user can send command
to ProcessManager to suspend the task or migrate the running task from one slave node to another.

SlaveNode: The SlaveNode class represents a server which is responsible for task execution. The SlaveNode Server, after
starting, continuely waits for a command from ProcessManager. After a messages from ProcessManager is
received, the SlaveNode cast the received the object as an ProcessMessage object. By using the checkMessage() method the
SlaveNode would be able to know which kind the message belong to. In this project, there are four kind of message that
would be used between ProcessManager and SlaveNode:

1. Launch Message:
   The ProcessManager will always send an serialized Task object along with the Launch Message. By receiving the launch
   Message, the SlaveNode will treat the Task object as a MigratableProcess and start it in a separate thread. After
   starting the task the SlaveNode will add the task id along with the thread project into a hashmap.

2. Suspend Message:
   The ProcessManager will send the task id along with message. The SlaveNode, after receiving the message, will try to
   locate the corresponding task in hashmap. If the task object is found, the SlaveNode will use the suspend() method to
   suspend the task.

3. Restart Message:
   The ProcessManager will send the task id along with message. The SlaveNode, after receiving the message, will try to
   locate the corresponding task in hashmap. If the task object is found, the SlaveNode will use create a new method to
   run the task.

4. Migrate Message:
   The ProcessManager will send the task id along with message. The SlaveNode, after receiving the message, will try to
    locate the corresponding task in hashmap. If the task object is found, the SlaveNode will use the suspend() methond
    to suspend the task and send the task object back to the ProcessManager.
